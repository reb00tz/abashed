#!/bin/bash

# error if no input
if [ ${#@} -eq 0 ]; then echo "No input, nothing to do! Use $0 --help for usage details.">&2; exit 255; fi;

#####################################################
# override options, arguments and description lists #
#####################################################

# short option list
SHORTOPTLIST=("h" "x" "y" "z")

# long option list
LONGOPTLIST=("help" "longx" "longy" "longz")

# option argument list
OPTARGLIST=("" "::" ":" "")

# list of variables used for optional arguments during PRINTUSAGE
ARGVARLIST=("" "optionX" "varY" "")

# usage list
OPTIONUSAGE=(
  "print usage help"
  "define x"
  "define y"
  "define z"
)

##################################
# overriden PRINTDESC() function #
##################################

function PRINTDESC {
  cat<<EOF
DEMO DESCRIPTION FROM test_script.sh meant to showcase getopt_helper.sh

EOF
}

#####################################################################
# call getopt_helper.sh under current ENV (note the preceding ". ") #
#####################################################################
. ./getopt_helper.sh


#########################################################################################
# copy and override options parsing - must be AFTER call to `. <path>/getopt_helper.sh` #
#########################################################################################

while true; do
  case "$1" in
    -h|--help)  PRINTUSAGE; exit 1;;
    -z|--longz) echo "Option z"; shift;;
    -y|--longy) echo "Option y, argument \`$2'"; shift 2;;
    -x|--longx)
      # x has an optional argument. As we are in quoted mode,
      # an empty parameter will be generated if its optional
      # argument is not found.
      case "$2" in
        "") echo "Option x, no argument"; shift 2;;
        *)  echo "Option x, argument \`$2'"; shift 2;;
      esac;;
    --) shift; break;;
      # "eat" the "--" separator generated by getopt, signifying any remaining non-recognised input
      # remove this "--" case if parsing of remaining input is required within this while/do/done loop
    *) echo "INTERNAL ERROR!"; exit 1;;
  esac
done

if [ ${#@} -ne 0 ]; then echo "Remaining arguments:"; fi;
for arg do echo '--> '"\`$arg'"; done;

